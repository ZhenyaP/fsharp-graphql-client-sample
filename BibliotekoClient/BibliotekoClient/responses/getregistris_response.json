{
  "data": {
    "registris": [
      {
        "id": "a42cef54-b82a-4e87-8067-b8d87e2b7877",
        "isbn": "9781617291326",
        "title": "F# Deep Dives",
        "authors": [
          "Tomas Petricek",
          "Phil Trelford"
        ],
        "reviews": [],
        "summary": "F# Deep Dives presents a collection of real-world F# techniques, each written by expert practitioners. Each chapter presents a new use case where you'll read how the author used F# to solve a complex problem more effectively than would have been possible using a traditional approach. You'll not only see how a specific solution works in a specific domain, you'll also learn how F# developers approach problems, what concepts they use to solve them, and how they integrate F# into existing systems and environments.",
        "imageurl": "https://images-na.ssl-images-amazon.com/images/I/41gsVLt5ZgL._SX396_BO1,204,203,200_.jpg"
      },
      {
        "id": "e8f5df8f-b8a5-461b-880a-facac7670848",
        "isbn": "9781680502541",
        "title": "Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F# 1st Edition",
        "authors": [
          "Scott Wlaschin "
        ],
        "reviews": [],
        "summary": "You want increased customer satisfaction, faster development cycles, and less wasted work. Domain-driven design (DDD) combined with functional programming is the innovative combo that will get you there. In this pragmatic, down-to-earth guide, you'll see how applying the core principles of functional programming can result in software designs that model real-world requirements both elegantly and concisely - often more so than an object-oriented approach. Practical examples in the open-source F# functional language, and examples from familiar business domains, show you how to apply these techniques to build software that is business-focused, flexible, and high quality.\r\nDomain-driven design is a well-established approach to designing software that ensures that domain experts and developers work together effectively to create high-quality software. This book is the first to combine DDD with techniques from statically typed functional programming. This book is perfect for newcomers to DDD or functional programming - all the techniques you need will be introduced and explained.\r\nModel a complex domain accurately using the F# type system, creating compilable code that is also readable documentation---ensuring that the code and design never get out of sync. Encode business rules in the design so that you have \"compile-time unit tests,\" and eliminate many potential bugs by making illegal states unrepresentable. Assemble a series of small, testable functions into a complete use case, and compose these individual scenarios into a large-scale design. Discover why the combination of functional programming and DDD leads naturally to service-oriented and hexagonal architectures. Finally, create a functional domain model that works with traditional databases, NoSQL, and event stores, and safely expose your domain via a website or API.\r\nSolve real problems by focusing on real-world requirements for your software.",
        "imageurl": "https://images-na.ssl-images-amazon.com/images/I/511O5zAOJiL._SX415_BO1,204,203,200_.jpg"
      }
    ]
  },
  "documentId": 1768458941,
  "requestType": "Classic"
}