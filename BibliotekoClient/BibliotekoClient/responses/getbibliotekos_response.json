{
  "data": {
    "bibliotekos": [
      {
        "id": "b5a21dc6-8a84-4ce2-8563-74a118449693",
        "content": [
          {
            "id": "c894880c-4f74-423f-b0eb-80381e586ea9",
            "registri": {
              "id": "e8f5df8f-b8a5-461b-880a-facac7670848",
              "isbn": "9781680502541",
              "title": "Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F# 1st Edition",
              "authors": [
                "Scott Wlaschin "
              ],
              "reviews": [],
              "summary": "You want increased customer satisfaction, faster development cycles, and less wasted work. Domain-driven design (DDD) combined with functional programming is the innovative combo that will get you there. In this pragmatic, down-to-earth guide, you'll see how applying the core principles of functional programming can result in software designs that model real-world requirements both elegantly and concisely - often more so than an object-oriented approach. Practical examples in the open-source F# functional language, and examples from familiar business domains, show you how to apply these techniques to build software that is business-focused, flexible, and high quality.\r\nDomain-driven design is a well-established approach to designing software that ensures that domain experts and developers work together effectively to create high-quality software. This book is the first to combine DDD with techniques from statically typed functional programming. This book is perfect for newcomers to DDD or functional programming - all the techniques you need will be introduced and explained.\r\nModel a complex domain accurately using the F# type system, creating compilable code that is also readable documentation---ensuring that the code and design never get out of sync. Encode business rules in the design so that you have \"compile-time unit tests,\" and eliminate many potential bugs by making illegal states unrepresentable. Assemble a series of small, testable functions into a complete use case, and compose these individual scenarios into a large-scale design. Discover why the combination of functional programming and DDD leads naturally to service-oriented and hexagonal architectures. Finally, create a functional domain model that works with traditional databases, NoSQL, and event stores, and safely expose your domain via a website or API.\r\nSolve real problems by focusing on real-world requirements for your software.",
              "imageurl": "https://images-na.ssl-images-amazon.com/images/I/511O5zAOJiL._SX415_BO1,204,203,200_.jpg"
            },
            "logbook": [
              "Creation { TimeStamp = 18.03.2020 7:47:04\n           Creator = UzantoID \"7a47474c-e739-416e-ad93-abd1e24a4af8\" }"
            ],
            "owner": "7a47474c-e739-416e-ad93-abd1e24a4af8"
          }],
        "address": {
          "freeformaddress": "FreeformAddress 2",
          "country": "Country 2",
          "countrycode": "CountryCode 2",
          "street": "Street 2",
          "buildingnumber": "BuildingNumber 2",
          "postalcode": "PostalCode 2"
        }
      }
    ]
  },
  "documentId": -533500759,
  "requestType": "Classic"
}